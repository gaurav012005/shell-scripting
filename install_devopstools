
#!/bin/bash

# List of necessary DevOps tools
TOOLS=("git" "gh" "aws" "terraform" "kubectl" "docker" "grafana" "prometheus")

# Function to check if a tool is installed
is_installed() {
    command -v "$1" >/dev/null 2>&1
}

# Function to install missing tools
install_tool() {
    case "$1" in
        git)
            echo "Installing Git..."
            sudo apt-get install -y git || { echo "‚ùå Failed to install Git"; exit 1; }
            ;;
        gh)
            echo "Installing GitHub CLI..."
            type -p curl >/dev/null || sudo apt install -y curl
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo tee /usr/share/keyrings/githubcli-archive-keyring.gpg >/dev/null
            echo "deb [signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list >/dev/null
            sudo apt update && sudo apt install -y gh || { echo "‚ùå Failed to install GitHub CLI"; exit 1; }
            ;;
        aws)
            echo "Installing AWS CLI..."
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" || { echo "‚ùå Failed to download AWS CLI"; exit 1; }
            unzip -q awscliv2.zip || { echo "‚ùå Failed to unzip AWS CLI"; exit 1; }
            sudo ./aws/install || { echo "‚ùå Failed to install AWS CLI"; exit 1; }
            rm -rf aws awscliv2.zip
            ;;
        terraform)
            echo "Installing Terraform..."
            sudo apt-get update
            sudo apt-get install -y software-properties-common
            wget -O- https://apt.releases.hashicorp.com/gpg | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg >/dev/null
            echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
            sudo apt-get update && sudo apt-get install -y terraform || { echo "‚ùå Failed to install Terraform"; exit 1; }
            ;;
        kubectl)
            echo "Installing kubectl..."
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" || { echo "‚ùå Failed to download kubectl"; exit 1; }
            sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl || { echo "‚ùå Failed to install kubectl"; exit 1; }
            rm kubectl
            ;;
        docker)
            echo "Installing Docker..."
            sudo apt-get update
            sudo apt-get install -y docker.io || { echo "‚ùå Failed to install Docker"; exit 1; }
            sudo systemctl enable --now docker || { echo "‚ùå Failed to start Docker"; exit 1; }
            ;;
        grafana)
            echo "Installing Grafana..."
            sudo apt-get install -y software-properties-common || { echo "‚ùå Failed to install software-properties-common"; exit 1; }
            wget -q -O - https://packages.grafana.com/gpg.key | sudo tee /usr/share/keyrings/grafana.key >/dev/null
            echo "deb [signed-by=/usr/share/keyrings/grafana.key] https://packages.grafana.com/oss/deb stable main" | sudo tee /etc/apt/sources.list.d/grafana.list
            sudo apt-get update && sudo apt-get install -y grafana || { echo "‚ùå Failed to install Grafana"; exit 1; }
            sudo systemctl enable --now grafana-server || { echo "‚ùå Failed to start Grafana"; exit 1; }
            ;;
        prometheus)
            echo "Installing Prometheus..."
            wget -q https://github.com/prometheus/prometheus/releases/latest/download/prometheus-linux-amd64.tar.gz || { echo "‚ùå Failed to download Prometheus"; exit 1; }
            tar xvf prometheus-linux-amd64.tar.gz || { echo "‚ùå Failed to extract Prometheus"; exit 1; }
            sudo mv prometheus-linux-amd64/prometheus /usr/local/bin/ || { echo "‚ùå Failed to move Prometheus binary"; exit 1; }
            sudo chmod +x /usr/local/bin/prometheus || { echo "‚ùå Failed to make Prometheus executable"; exit 1; }
            rm -rf prometheus-linux-amd64 prometheus-linux-amd64.tar.gz
            ;;
        *)
            echo "‚ö†Ô∏è Unknown tool: $1"
            ;;
    esac
}

# Function to update installed tools
update_tool() {
    case "$1" in
        git | docker | grafana)
            sudo apt-get update && sudo apt-get install --only-upgrade -y "$1" || { echo "‚ùå Failed to update $1"; exit 1; }
            ;;
        gh)
            sudo apt-get update && sudo apt-get install --only-upgrade -y gh || { echo "‚ùå Failed to update GitHub CLI"; exit 1; }
            ;;
        aws)
            sudo ./aws/install --update || { echo "‚ùå Failed to update AWS CLI"; exit 1; }
            ;;
        terraform)
            sudo apt-get update && sudo apt-get install --only-upgrade -y terraform || { echo "‚ùå Failed to update Terraform"; exit 1; }
            ;;
        kubectl)
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" || { echo "‚ùå Failed to download kubectl"; exit 1; }
            sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl || { echo "‚ùå Failed to install kubectl"; exit 1; }
            rm kubectl
            ;;
        prometheus)
            wget -q https://github.com/prometheus/prometheus/releases/latest/download/prometheus-linux-amd64.tar.gz || { echo "‚ùå Failed to download Prometheus"; exit 1; }
            tar xvf prometheus-linux-amd64.tar.gz || { echo "‚ùå Failed to extract Prometheus"; exit 1; }
            sudo mv prometheus-linux-amd64/prometheus /usr/local/bin/ || { echo "‚ùå Failed to move Prometheus binary"; exit 1; }
            sudo chmod +x /usr/local/bin/prometheus || { echo "‚ùå Failed to make Prometheus executable"; exit 1; }
            rm -rf prometheus-linux-amd64 prometheus-linux-amd64.tar.gz
            ;;
        *)
            echo "‚ö†Ô∏è Skipping update for $1 (manual update may be required)."
            ;;
    esac
}

# Check and install/update tools
for tool in "${TOOLS[@]}"; do
    echo "üîç Checking $tool..."
    if is_installed "$tool"; then
        echo "‚úÖ $tool is already installed. Updating..."
        update_tool "$tool"
    else
        echo "‚ùå $tool is not installed. Installing..."
        install_tool "$tool"
    fi
done

# List installed tools
echo -e "\nüìã Installed DevOps Tools:"
for tool in "${TOOLS[@]}"; do
    if is_installed "$tool"; then
        echo "‚úÖ $tool - Installed"
    else
        echo "‚ùå $tool - Not Installed"
    fi
done

